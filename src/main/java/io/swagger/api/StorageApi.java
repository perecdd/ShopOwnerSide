/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse200;
import io.swagger.model.Rating;
import io.swagger.model.StorageBody;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-12-19T09:20:14.611Z[GMT]")
@Validated
public interface StorageApi {

    @Operation(summary = "Receives products on request.", description = "The query scans the tables of all manufacturers for the presence of products with the specified characteristics and outputs them as a result.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request") })
    @RequestMapping(value = "/storage",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> getCompany(@Parameter(in = ParameterIn.HEADER, description = "Company ID in the database." ,schema=@Schema()) @RequestHeader(value="Company ID.", required=false) Integer companyID, @Parameter(in = ParameterIn.HEADER, description = "Product name." ,schema=@Schema()) @RequestHeader(value="name", required=false) String name, @Parameter(in = ParameterIn.HEADER, description = "The minimum price of the product." ,schema=@Schema()) @RequestHeader(value="minPrice", required=false) Integer minPrice, @Parameter(in = ParameterIn.HEADER, description = "The maximum price of the product." ,schema=@Schema()) @RequestHeader(value="maxPrice", required=false) Integer maxPrice, @Parameter(in = ParameterIn.HEADER, description = "Minimum quantity of product in stock." ,schema=@Schema()) @RequestHeader(value="count", required=false) Integer count, @Parameter(in = ParameterIn.HEADER, description = "Product ID in the company's database." ,schema=@Schema()) @RequestHeader(value="productID", required=false) Integer productID);

    @Operation(summary = "Get all the company's products.", description = "The request is necessary for companies, it allows you to get the entire database of products using a single email address (the email address is taken for the convenience of the company).", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),

            @ApiResponse(responseCode = "400", description = "Bad Request") })
    @RequestMapping(value = "/storageCompany",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> getForCompany(@Parameter(in = ParameterIn.HEADER, description = "Company email for identification." ,schema=@Schema()) @RequestHeader(value="email", required=true) String companyEmail);

    @Operation(summary = "Checks whether the company exists.", description = "The request is needed for the part of the services dedicated to working with the company. By email address and password, it allows you to check whether such a company exists, or, in other words, whether there is a specified registered company or not.", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "400", description = "Bad Request") })
    @RequestMapping(value = "/checkStorage",
            method = RequestMethod.GET)
    ResponseEntity<Void> checkCompany(@Parameter(in = ParameterIn.HEADER, description = "Company email for identification." ,required=true,schema=@Schema()) @RequestHeader(value="email", required=true) String email, @Parameter(in = ParameterIn.HEADER, description = "Company password" ,required=true,schema=@Schema()) @RequestHeader(value="password", required=true) String password);

    @Operation(summary = "Registers a company.", description = "A new company is registered in the system, a separate table is created to store the product database and a \"Hello world\" product is added to it.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request") })
    @RequestMapping(value = "/storage",
        method = RequestMethod.POST)
    ResponseEntity<Void> postCompany(@Parameter(in = ParameterIn.HEADER, description = "Company email" ,required=true,schema=@Schema()) @RequestHeader(value="email", required=true) String email, @Parameter(in = ParameterIn.HEADER, description = "The name of the company that users will see." ,required=true,schema=@Schema()) @RequestHeader(value="name", required=true) String name, @Parameter(in = ParameterIn.HEADER, description = "Company password" ,required=true,schema=@Schema()) @RequestHeader(value="password", required=true) String password);


    @Operation(summary = "Updates the product database.", description = "The request allows you to add non-existing products to the database and change existing products in the database to the specified ones. The replacement takes place by the product ID.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/storage",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> putCompany(@Parameter(in = ParameterIn.HEADER, description = "Company email for identification." ,required=true,schema=@Schema()) @RequestHeader(value="email", required=true) String email, @Parameter(in = ParameterIn.HEADER, description = "Company password" ,required=true,schema=@Schema()) @RequestHeader(value="password", required=true) String password, @Parameter(in = ParameterIn.DEFAULT, description = "An object with an array of products.", schema=@Schema()) @Valid @RequestBody StorageBody body);
}

